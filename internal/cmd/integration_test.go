package cmd_test

import (
	"bytes"
	"os"
	"path/filepath"
	"runtime"
	"testing"

	"github.com/patrickhoefler/dockerfilegraph/internal/cmd"
	"github.com/spf13/afero"
)

func TestIntegrationCLIGeneratesOutputFile(t *testing.T) {
	tempDir := t.TempDir()
	dockerfilePath := copyExampleDockerfile(t, tempDir)

	originalWorkingDirectory, _ := os.Getwd()
	if err := os.Chdir(tempDir); err != nil {
		t.Fatalf("failed to change to temp dir: %v", err)
	}
	defer func() {
		if err := os.Chdir(originalWorkingDirectory); err != nil {
			t.Fatalf("failed to restore working directory: %v", err)
		}
	}()

	inputFS := afero.NewOsFs()

	// Run CLI to generate Dockerfile.dot
	runCLI(t, inputFS, dockerfilePath)
	dotFile := filepath.Join(tempDir, "Dockerfile.dot")

	// Read the DOT file generated by the CLI
	outputBytes, err := os.ReadFile(dotFile)
	if err != nil {
		t.Fatalf("failed to read generated dot file: %v", err)
	}

	checkGoldenFile(t, outputBytes)
}

func copyExampleDockerfile(t *testing.T, tempDir string) string {
	dockerfileSrc := filepath.Join("..", "..", "examples", "dockerfiles", "Dockerfile")
	content, err := os.ReadFile(dockerfileSrc)
	if err != nil {
		t.Fatalf("failed to read example Dockerfile: %v", err)
	}
	dockerfileDst := filepath.Join(tempDir, "Dockerfile")
	if err := os.WriteFile(dockerfileDst, content, 0644); err != nil {
		t.Fatalf("failed to write Dockerfile to temp dir: %v", err)
	}
	return dockerfileDst
}

func runCLI(t *testing.T, inputFS afero.Fs, dockerfilePath string) {
	buf := new(bytes.Buffer)
	command := cmd.NewRootCmd(buf, inputFS, "dot")
	command.SetArgs([]string{"--filename", filepath.Base(dockerfilePath), "--output", "dot"})
	command.SetOut(buf)
	command.SetErr(buf)

	if err := command.Execute(); err != nil {
		t.Fatalf("CLI execution for DOT failed: %v\nOutput: %s", err, buf.String())
	}
}

func checkGoldenFile(t *testing.T, dotBytes []byte) {
	_, thisFile, _, _ := runtime.Caller(0)
	goldenDir := filepath.Join(filepath.Dir(thisFile), "testdata")
	goldenFile := filepath.Join(goldenDir, "Dockerfile.golden.dot")

	if _, err := os.Stat(goldenFile); os.IsNotExist(err) {
		if err := os.MkdirAll(goldenDir, 0755); err != nil {
			t.Fatalf("failed to create testdata dir: %v", err)
		}
		if err := os.WriteFile(goldenFile, dotBytes, 0644); err != nil {
			t.Fatalf("failed to write golden file: %v", err)
		}
		t.Logf("golden file did not exist, created: %s", goldenFile)
	} else {
		goldenBytes, err := os.ReadFile(goldenFile)
		if err != nil {
			t.Fatalf("failed to read golden file: %v", err)
		}
		if !bytes.Equal(dotBytes, goldenBytes) {
			t.Errorf(
				"output DOT does not match golden file.\n"+
					"To update, delete %s and re-run the test.\n"+
					"--- Got ---\n%s\n--- Want ---\n%s",
				goldenFile, dotBytes, goldenBytes,
			)
		}
	}
}
