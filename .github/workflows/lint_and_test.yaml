name: Lint & Test

on:
  workflow_call:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3
        with:
          go-version-file: 'go.mod'

      - name: Run the linters
        uses: golangci/golangci-lint-action@537aa1903e5d359d0b27dbc19ddd22c5087f3fbc # tag=v3.2.0

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3
        with:
          go-version-file: 'go.mod'

      - name: Install graphviz
        run: sudo apt install --no-install-recommends -y graphviz

      - name: Run the tests and generate the coverage profile
        run: go test ./... --coverprofile=cover.out

      - name: Install gocovergate
        run: go install github.com/patrickhoefler/gocovergate@latest

      - name: Check the code coverage
        run: gocovergate

  build-native:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3
        with:
          go-version-file: 'go.mod'

      - name: Build
        run: make build

      - name: '[macOS] Install graphviz'
        if: runner.os == 'macOS'
        run: brew install graphviz

      - name: '[Ubuntu] Install graphviz'
        if: runner.os == 'Linux'
        run: sudo apt install --no-install-recommends -y graphviz

      - name: '[Windows] Install graphviz'
        if: runner.os == 'Windows'
        run: choco install graphviz --no-progress

      # Smoke tests
      - name: Get the version
        run: cd example && ../dockerfilegraph --version

      - name: Run the binary with flags
        run: cd example && ../dockerfilegraph --legend --output png --dpi 200

  build-images:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Check out the code
        uses: actions/checkout@2541b1294d2704b0964813337f33b291d3f8596b # tag=v3

      - name: Set up Go
        uses: actions/setup-go@268d8c0ca0432bb2cf416faae41297df9d262d7f # tag=v3
        with:
          go-version-file: 'go.mod'

      - name: Build binaries and Docker image with GoReleaser
        uses: goreleaser/goreleaser-action@ff11ca24a9b39f2d36796d1fbd7a4e39c182630a # tag=v3
        with:
          args: release --snapshot --skip-publish

      - name: Make example directory writable for all users
        run: chmod -R o+w example

      # Smoke tests
      - name: Get the version
        run: |
          cd example
          docker run \
            ghcr.io/patrickhoefler/dockerfilegraph:latest \
            --version

      - name: Get the version on Alpine
        run: |
          cd example
          docker run \
            ghcr.io/patrickhoefler/dockerfilegraph:alpine \
            --version

      - name: Run the Docker image with flags
        run: |
          cd example
          docker run \
            --user "$(id -u):$(id -g)" \
            --workdir /workspace \
            --volume "$(pwd)":/workspace \
            ghcr.io/patrickhoefler/dockerfilegraph:latest \
            --legend \
            --output png \
            --dpi 200

      - name: Run the Alpine-based Docker image with flags
        run: |
          cd example
          docker run \
            --user "$(id -u):$(id -g)" \
            --workdir /workspace \
            --volume "$(pwd)":/workspace \
            ghcr.io/patrickhoefler/dockerfilegraph:alpine \
            --legend \
            --output png \
            --dpi 200
