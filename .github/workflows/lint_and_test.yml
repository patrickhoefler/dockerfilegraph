name: Lint & Test

on:
  workflow_call:

permissions:  # added using https://github.com/step-security/secure-workflows
  contents: read

jobs:
  lint:
    permissions:
      contents: read  # for actions/checkout to fetch code
      pull-requests: read  # for golangci/golangci-lint-action to fetch pull requests
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Check out the code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: 'go.mod'

      - name: Run the linters
        uses: golangci/golangci-lint-action@0adbc47a5910e47adb692df88187ec8c73c76778 # v6.4.0

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Check out the code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: 'go.mod'

      - name: Install graphviz
        run: sudo apt install --no-install-recommends -y graphviz

      - name: Run the tests and generate the coverage profile
        run: go test ./... --coverprofile=cover.out

      - name: Install gocovergate
        run: go install github.com/patrickhoefler/gocovergate@latest

      - name: Check the code coverage
        run: gocovergate

  build-native:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    needs: [lint, test]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Check out the code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: 'go.mod'

      - name: Build
        run: make build

      - name: '[macOS] Install graphviz'
        if: runner.os == 'macOS'
        run: brew install graphviz

      - name: '[Ubuntu] Install graphviz'
        if: runner.os == 'Linux'
        run: sudo apt install --no-install-recommends -y graphviz

      - name: '[Windows] Install graphviz'
        if: runner.os == 'Windows'
        run: choco install graphviz --no-progress

      # Smoke tests
      - name: Get the version
        run: ./dockerfilegraph --version

      - name: Run the binary with flags
        run: ./dockerfilegraph --filename examples/dockerfiles/Dockerfile --legend --output png --dpi 200

  build-images:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@cb605e52c26070c328afc4562f0b4ada7618a84e # v2.10.4
        with:
          egress-policy: audit # TODO: change to 'egress-policy: block' after couple of runs

      - name: Check out the code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Set up Go
        uses: actions/setup-go@f111f3307d8850f501ac008e886eec1fd1932a34 # v5.3.0
        with:
          go-version-file: 'go.mod'

      - name: Build binaries and Docker image with GoReleaser
        uses: goreleaser/goreleaser-action@90a3faa9d0182683851fbfa97ca1a2cb983bfca3 # v6.2.1
        with:
          version: '~> v2'
          args: release --snapshot

      # Smoke tests
      - name: Get the version
        run: |
          docker run \
            ghcr.io/patrickhoefler/dockerfilegraph:latest \
            --version

      - name: Get the version on Alpine
        run: |
          docker run \
            ghcr.io/patrickhoefler/dockerfilegraph:alpine \
            --version

      - name: Run the Docker image with flags
        run: |
          cd examples/dockerfiles
          docker run \
            --user "$(id -u):$(id -g)" \
            --workdir /workspace \
            --volume "$(pwd)":/workspace \
            ghcr.io/patrickhoefler/dockerfilegraph:latest \
            --legend \
            --output png \
            --dpi 200

      - name: Run the Alpine-based Docker image with flags
        run: |
          cd examples/dockerfiles
          docker run \
            --user "$(id -u):$(id -g)" \
            --workdir /workspace \
            --volume "$(pwd)":/workspace \
            ghcr.io/patrickhoefler/dockerfilegraph:alpine \
            --legend \
            --output png \
            --dpi 200
